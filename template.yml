---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A basic template for creating a Lambda-backed API Gateway for use as
  a custom identity provider in AWS Transfer. It also has a built-in capability to
  limit the maximum number of active sessions each user can have in the system.
  It authenticates against an entry in AWS Secrets Manager of the format 
  server-id/username. Additionaly, the secret must hold the key-value pairs for 
  all user properties returned to AWS Transfer. If you choose to also launch the 
  AWS Transfer endpoint it will be provisioned with the SFTP protocol. The Session
  count is stored in AWS ElastiCache (Memcached).
  This can be changed after launch. Note that FTP is only supported on VPC endpoints
  You can modify the Lambda function code to do something different after deployment.
Parameters:
  CreateServer:
    AllowedValues:
      - 'true'
      - 'false'
    Type: String
    Description: Whether this stack creates an AWS Transfer endpoint or not. If the endpoint is created as
      part of the stack, the custom identity provider is automatically associated with it.
    Default: 'true'
  CreateCacheServer:
    AllowedValues:
      - 'true'
      - 'false'
    Type: String
    Description: Whether this stack creates an AWS ElasticCache. If CreateServer is not selected, this will
      be disabled as well. If TransferVPCID and TransferSubnetIDs are not provided, this will be disabled as
      well.
    Default: 'true'
  SecretsManagerRegion:
    Type: String
    Description: (Optional) The region the secrets are stored in. If this value is not provided, the
      region this stack is deployed in will be used. Use this field if you are deploying this stack in
      a region where SecretsMangager is not available.
    Default: ''
  TransferEndpointType:
    AllowedValues:
      - 'PUBLIC'
      - 'VPC'
    Type: String
    Default: 'VPC'
    Description: Select PUBLIC if you want a public facing AWS Transfer endpoint or VPC if you want a VPC
      based endpoint. Note that only SFTP and FTPS are supported on public endpoints.
  TransferSubnetIDs:
    Type: String
    Default: ''
    Description: Required if launching a VPC endpoint. Comma-seperated list of subnets that you would like
      the AWS Transfer endpoint to be provisioned into.
  TransferVPCID:
    Type: String
    Default: ''
    Description: Required if launching a VPC endpoint. The VPC ID that you would like the AWS Transfer endpoint
      to be provisioned into.
  CacheNodeType:
    Description: Cache node instance class, e.g. cache.t2.micro(free tier). See https://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/CacheNodes.SelectSize.html
    Type: String
    Default: cache.t2.micro
    ConstraintDescription: Node instance class not supported
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.m4.large
      - cache.m4.xlarge
      - cache.m4.2xlarge
      - cache.m4.4xlarge
      - cache.m4.10xlarge
      - cache.r4.large
      - cache.r4.xlarge
      - cache.r4.2xlarge
      - cache.r4.4xlarge
      - cache.r4.8xlarge
      - cache.r4.16xlarge
  DefaultMaxSessionLimit:
    Description: Specific the number of active sessions each user can have. This can be overridden in Secrets Manager by user config.
    Type: String
    Default: '100'
Conditions:
  CreateServer:
    Fn::Equals:
      - Ref: CreateServer
      - 'true'
  NotCreateServer:
    Fn::Not:
      - Condition: CreateServer
  CreateCacheServer:
    !And
      - !Equals ['true', !Ref CreateCacheServer]
      - !Equals ['true', !Ref CreateServer]
      - !Not
        - !Equals ['', !Ref TransferVPCID] 
      - !Not
        - !Equals ['', !Ref TransferSubnetIDs] 
  NotCreateCacheServer:
    Fn::Not:
      - Condition: CreateCacheServer
  SecretsManagerRegionProvided:
    Fn::Not:
      - Fn::Equals:
          - Ref: SecretsManagerRegion
          - ''
  TransferVPCEndpoint:
    Fn::Equals:
      - Ref: TransferEndpointType
      - 'VPC'
  CreateVPCEndpoint: 
    !And
      - !Equals ['PUBLIC', !Ref TransferEndpointType]
      - !Equals ['true', !Ref CreateCacheServer]
      - !Equals ['true', !Ref CreateServer]
      - !Not
        - !Equals ['', !Ref TransferVPCID] 
      - !Not
        - !Equals ['', !Ref TransferSubnetIDs] 
Outputs:
  ServerId:
    Value:
      Fn::GetAtt: TransferServer.ServerId
    Condition: CreateServer
  StackArn:
    Value:
      Ref: AWS::StackId
  TransferIdentityProviderUrl:
    Description: URL to pass to AWS Transfer CreateServer call as part of optional IdentityProviderDetails
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: CustomIdentityProviderApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: ApiStage
    Condition: NotCreateServer
  TransferIdentityProviderInvocationRole:
    Description: IAM Role to pass to AWS Transfer CreateServer call as part of optional IdentityProviderDetails
    Value:
      Fn::GetAtt: TransferIdentityProviderRole.Arn
    Condition: NotCreateServer
  ElastiCacheClusterArn:
    Description: ElastiCache Cluster Arn
    Value: !Sub arn:aws:elasticache:${AWS::Region}:${AWS::AccountId}:cluster/${ElastiCacheCluster}
    Export:
      Name: !Sub ${AWS::StackName}-ElastiCacheClusterArn
    Condition: CreateCacheServer
Resources:
  TransferServer:
    Type: AWS::Transfer::Server
    Condition: CreateServer
    Properties:
      EndpointType:
        Ref: TransferEndpointType
      EndpointDetails:
        Fn::If:
          - TransferVPCEndpoint
          - SubnetIds:
              Fn::Split: [',', Ref: TransferSubnetIDs]
            VpcId:
              Ref: TransferVPCID
          - Ref: AWS::NoValue
      IdentityProviderDetails:
        InvocationRole:
          Fn::GetAtt: TransferIdentityProviderRole.Arn
        Url:
          Fn::Join:
            - ''
            - - https://
              - Ref: CustomIdentityProviderApi
              - .execute-api.
              - Ref: AWS::Region
              - .amazonaws.com/
              - Ref: ApiStage
      IdentityProviderType: API_GATEWAY
      LoggingRole:
        Fn::GetAtt: TransferCWLoggingRole.Arn
  TransferCWLoggingRole:
    Description: IAM role used by Transfer to log API requests to CloudWatch
    Type: AWS::IAM::Role
    Condition: CreateServer
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transfer.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSTransferLoggingAccess
  CustomIdentityProviderApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Transfer Family Secrets Manager Integration API
      Description: API used for Transfer Family to access user information in Secrets Manager
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
        - REGIONAL
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: LambdaSecretsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              Fn::Sub:
                - arn:${AWS::Partition}:secretsmanager:${SecretsRegion}:${AWS::AccountId}:secret:s-*
                - SecretsRegion:
                    Fn::If:
                      - SecretsManagerRegionProvided
                      - Ref: SecretsManagerRegion
                      - Ref: AWS::Region
  ApiCloudWatchLogsRole:
    Description: IAM role used by API Gateway to log API requests to CloudWatch
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"
  ApiLoggingAccount:
    Type: AWS::ApiGateway::Account
    DependsOn:
    - CustomIdentityProviderApi
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt: ApiCloudWatchLogsRole.Arn
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment202008
      MethodSettings:
      - DataTraceEnabled: false
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: CustomIdentityProviderApi
      StageName: prod
  ApiDeployment202008:
    DependsOn:
    - GetUserConfigRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
  TransferIdentityProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: transfer.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: TransferCanInvokeThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource:
              Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomIdentityProviderApi}/prod/GET/*
      - PolicyName: TransferCanReadThisApi
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - apigateway:GET
            Resource: "*"
  GetUserConfigLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Description: A function to lookup and return user data from AWS Secrets Manager.
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10
      VpcConfig:
        !If
        - CreateCacheServer
        - 
          SecurityGroupIds:
            - !GetAtt LambdaFunctionSecurityGroup.GroupId
          SubnetIds:
            Fn::Split: [',', Ref: TransferSubnetIDs]
        - !Ref "AWS::NoValue"
      Environment:
        Variables:
          SecretsManagerRegion:
            Fn::If:
              - SecretsManagerRegionProvided
              - Ref: SecretsManagerRegion
              - Ref: AWS::Region
          ElastiCacheEndpoint:
            Fn::If:
              - CreateCacheServer
              - Fn::GetAtt: ElastiCacheCluster.ConfigurationEndpoint.Address
              - Ref: AWS::NoValue
          ElastiCacheEndpointPort:
            Fn::If:
              - CreateCacheServer
              - Fn::GetAtt: ElastiCacheCluster.ConfigurationEndpoint.Port
              - Ref: AWS::NoValue
          DefaultMaxSessionLimit: !Ref DefaultMaxSessionLimit
  GetUserConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt: GetUserConfigLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${CustomIdentityProviderApi}/*
  ServersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Fn::GetAtt:
        - CustomIdentityProviderApi
        - RootResourceId
      PathPart: servers
  ServerIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: ServersResource
      PathPart: "{serverId}"
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: ServerIdResource
      PathPart: users
  UserNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: UsersResource
      PathPart: "{username}"
  GetUserConfigResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ParentId:
        Ref: UserNameResource
      PathPart: config
  GetUserConfigRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: GetUserConfigResponseModel
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt:
                - GetUserConfigLambda
                - Arn
              - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json: |
            {
              "username": "$util.urlDecode($input.params('username'))",
              "password": "$util.escapeJavaScript($input.params('Password')).replaceAll("\\'","'")",
              "protocol": "$input.params('protocol')",
              "serverId": "$input.params('serverId')",
              "sourceIp": "$input.params('sourceIp')"
            }
      RequestParameters:
        method.request.header.Password: false
      ResourceId:
        Ref: GetUserConfigResource
      RestApiId:
        Ref: CustomIdentityProviderApi
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: UserConfigResponseModel
  GetUserConfigResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: CustomIdentityProviderApi
      ContentType: application/json
      Description: API response for GetUserConfig
      Name: UserConfigResponseModel
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: UserUserConfig
        type: object
        properties:
          HomeDirectory:
            type: string
          Role:
            type: string
          Policy:
            type: string
          PublicKeys:
            type: array
            items:
              type: string
  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Condition: CreateCacheServer
    Properties:
      Description: Cache Subnet Group
      SubnetIds:
        Fn::Split: [',', Ref: TransferSubnetIDs]

  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Condition: CreateCacheServer
    Properties:
      AutoMinorVersionUpgrade: true
      Engine: memcached
      CacheNodeType: !Ref CacheNodeType
      ClusterName : !Sub "${AWS::StackName}-CacheCluster"
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        [ Fn::GetAtt: LambdaFunctionSecurityGroup.GroupId ]

  FTPSessionTrackingLambda:
    Type: AWS::Serverless::Function
    Condition: CreateCacheServer
    Properties:
      CodeUri: ftp-session-tracking-src/
      Description: A function to lookup and return user data from AWS Secrets Manager.
      Handler: ftp-session-tracking.lambda_handler
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt: LambdaFunctionSecurityGroup.GroupId
        SubnetIds:
          Fn::Split: [',', Ref: TransferSubnetIDs]
      Environment:
        Variables:
          ElastiCacheEndpoint:
            Fn::GetAtt: ElastiCacheCluster.ConfigurationEndpoint.Address
          ElastiCacheEndpointPort:
            Fn::GetAtt: ElastiCacheCluster.ConfigurationEndpoint.Port
  TransferLogGroup:
    Condition: CreateCacheServer
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/transfer/${TransferServer.ServerId}"
  FTPSessionTrackingLogSubscriptionFilter:
    Condition: CreateCacheServer
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: TransferLogGroup
    DependsOn: LogGroupLambdaInvokePermission
    Properties: 
      DestinationArn: !GetAtt FTPSessionTrackingLambda.Arn
      FilterPattern: "CONNECT"
      LogGroupName:  !Sub "/aws/transfer/${TransferServer.ServerId}"
  LogGroupLambdaInvokePermission:
    Condition: CreateCacheServer
    Type: AWS::Lambda::Permission
    DependsOn: "TransferLogGroup"
    Properties:
      FunctionName: !GetAtt FTPSessionTrackingLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: !Sub "logs.${AWS::Region}.amazonaws.com"
      SourceArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/transfer/${TransferServer.ServerId}:*"
      SourceAccount:
        Ref: "AWS::AccountId"
  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateCacheServer
    Properties:
      GroupDescription: ElastiCache Security Group
      VpcId:
        Ref: TransferVPCID
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LambdaSecurityGroup"
  LambdaFunctionSecurityGroupIngress11211:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateCacheServer
    Properties:
      GroupId: !Ref LambdaFunctionSecurityGroup
      SourceSecurityGroupId: !Ref LambdaFunctionSecurityGroup
      IpProtocol: tcp
      FromPort: 11211
      ToPort: 11211
  LambdaFunctionSecurityGroupIngress443:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateCacheServer
    Properties:
      GroupId: !Ref LambdaFunctionSecurityGroup
      SourceSecurityGroupId: !Ref LambdaFunctionSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  SecretManagerEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Condition: CreateVPCEndpoint
      Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !GetAtt LambdaFunctionSecurityGroup.GroupId
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
        SubnetIds:
          Fn::Split: [',', Ref: TransferSubnetIDs]
        VpcEndpointType: 'Interface'
        VpcId:
          Ref: TransferVPCID

